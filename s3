{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "AllowInstanceViewingAndBasicListing",
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeVpcs",
                "ec2:DescribeSubnets",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeInstanceTypes",
                "ec2:DescribeImages",
                "ec2:DescribeKeyPairs",
                "ec2:GetConsoleOutput" // Allows users to get console output, which can be useful for troubleshooting without logging in
            ],
            "Resource": "*" // Describe actions often require "*" for full console functionality
        },
        {
            "Sid": "AllowLimitedInstanceActionsOnTaggedInstances",
            "Effect": "Allow",
            "Action": [
                "ec2:StartInstances",
                "ec2:StopInstances",
                "ec2:RebootInstances"
            ],
            "Resource": "arn:aws:ec2:YOUR_REGION:YOUR_ACCOUNT_ID:instance/*",
            "Condition": {
                "StringEquals": {
                    "ec2:ResourceTag/Project": "MalwareLab" // CHANGE 'Project' and 'MalwareLab' if your tag is different
                }
            }
        },
        {
            "Sid": "DenyInstanceCreationTerminationAndOtherPrivilegedEICActions",
            "Effect": "Deny",
            "Action": [
                "ec2:RunInstances",
                "ec2:TerminateInstances",
                "ec2:CreateInstanceConnectEndpoint", // Prevent creating EIC Endpoints
                "ec2:ModifyInstanceAttribute" // Broadly prevent changing attributes that could escalate privilege or enable connections
            ],
            "Resource": "*"
        },
        {
            "Sid": "DenyInteractiveAccessAndModificationMethods",
            "Effect": "Deny",
            "Action": [
                "ec2-instance-connect:SendSSHPublicKey", // For EC2 Instance Connect browser-based SSH
                "ec2:Connect",                           // For EC2 Serial Console access
                "ssm:StartSession",                      // For Systems Manager Session Manager (alternative shell access)
                "ec2:AuthorizeSecurityGroupIngress",     // Prevent users from opening ports
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:RevokeSecurityGroupIngress",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:CreateSecurityGroup",
                "ec2:DeleteSecurityGroup",
                "ec2:CreateKeyPair",
                "ec2:DeleteKeyPair",
                "ec2:ImportKeyPair"
            ],
            "Resource": "*" // These actions are generally broad or not tied to a specific instance ARN in the same way
        }
    ]
}





























<powershell>
# Define the download URL for the SSM Agent (replace with the latest version if needed)
$SSMAgentDownloadURL = "https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe"
$SSMAgentInstaller = "C:\Temp\AmazonSSMAgentSetup.exe"

# Create a temporary directory if it doesn't exist
if (-not (Test-Path "C:\Temp")) {
    New-Item -ItemType Directory -Path "C:\Temp" | Out-Null
}

# Download the SSM Agent installer
try {
    Invoke-WebRequest -Uri $SSMAgentDownloadURL -OutFile $SSMAgentInstaller
    Write-Host "Successfully downloaded SSM Agent installer."
} catch {
    Write-Error "Failed to download SSM Agent installer: $($_.Exception.Message)"
    exit 1
}

# Execute the SSM Agent installer
try {
    Start-Process -FilePath $SSMAgentInstaller -ArgumentList "/s" -Wait
    Write-Host "Successfully installed SSM Agent."
} catch {
    Write-Error "Failed to install SSM Agent: $($_.Exception.Message)"
    exit 1
}

# Start the SSM Agent service
try {
    Start-Service AmazonSSMAgent
    Write-Host "Successfully started SSM Agent service."
} catch {
    Write-Error "Failed to start SSM Agent service: $($_.Exception.Message)"
    exit 1
}

# Optionally, you can register the instance with a specific SSM Managed Instance Group using the following command
# & "C:\Program Files\Amazon\SSM\amazon-ssm-agent.exe" -register -managed-instance-group "YourManagedInstanceGroupName"
</powershell>
